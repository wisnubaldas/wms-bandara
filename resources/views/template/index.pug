doctype html
head
    meta(charset='utf-8')
    title CTOS's
    meta(content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no' name='viewport')
    meta(content='' name='description')
    meta(content='' name='author')
    //- meta(name='csrf-token' content=x)
    link(href='https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700' rel='stylesheet')
    link(rel="stylesheet", href="/assets/css/vendor.min.css")
    link(rel="stylesheet", href="/assets/css/default/app.min.css")
    block css
body 
    #loader.app-loader
        span.spinner
    #app.app.app-header-fixed.app-sidebar-fixed.app-without-sidebar.app-with-top-menu
        include /template/header
        include /template/menu
        #content.app-content
            block content 
        a.btn.btn-icon.btn-circle.btn-success.btn-scroll-to-top(href='javascript:;' data-toggle='scroll-to-top')
            i.fa.fa-angle-up
    script(defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.14.3/dist/cdn.min.js") 
    script(src="/assets/js/vendor.min.js") 
    script(src="/assets/js/app.min.js") 
    script(src="/assets/js/theme/default.min.js") 
    script(src="/assets/js/custom.js")
    script(type="text/javascript"). 
            function menuTree() {
                return {
                    tree: [],
                    init() {
                        fetch('/api/menus/')
                            .then(response => response.json())
                            .then(data => {
                                let map = [];
                                // Create a map with ID as the key and children array
                                data.forEach(item => {
                                    map[item.id] = { ...item, children: [] };
                                });

                                // Iterate over the data again to establish parent-child relationships
                                data.forEach(item => {
                                    //- console.log("cibay",item)
                                    if (item.parent_id == "0") {
                                        // Top-level items (no parent)
                                        this.tree.push(map[item.id]);
                                    } else {
                                        // Items with a parent, add to the parent's children
                                        if (map[item.parent_id] && typeof map[item.parent_id] !== 'undefined') {
                                            map[item.parent_id].children.push(map[item.id]);
                                        }
                                    }
                                });
                            })
                            .catch(error => console.error('Error fetching menu data:', error));
                    },
                }
            }
    block js